[
  {
    "name": "cat",
    "desc": "Concatenate FILE(s), or standard input, to standard output.",
    "input": "multi",
    "flags": [
      {
        "name": "Number", "short": "n", "long": "number", "type": "bool",
        "desc": "number all output lines"
      },
      {
        "name": "NumberNonblank", "short": "b", "long": "number-nonblank", "type": "bool",
        "desc": "number nonempty output lines, overrides -n"
      },
      {
        "name": "ShowEnds", "short": "E", "long": "show-ends", "type": "bool",
        "desc": "display $ at end of each line"
      },
      {
        "name": "ShowTabs", "short": "T", "long": "show-tabs", "type": "bool",
        "desc": "display TAB characters as ^I"
      },
      {
        "name": "ShowNonprinting", "short": "v", "long": "show-nonprinting", "type": "bool",
        "desc": "use ^ and M- notation, except for LFD and TAB"
      },
      {
        "name": "squeezeBlank", "short": "s", "long": "squeeze-blank", "type": "bool",
        "desc": "suppress repeated empty output lines"
      }
    ]
  },
  {
    "name": "tac",
    "desc": "Write each FILE to standard output, last line first. With no FILE, or when FILE is -, read standard input.",
    "input": "multi",
    "flags": [
      {
        "name": "Separator", "short": "s", "long": "separator", "type": "string",
        "desc": "use STRING as the separator instead of newline"
      },
      {
        "name": "Before", "short": "b", "long": "before", "type": "bool",
        "desc": "attach the separator before instead of after"
      },
      {
        "name": "Regex", "short": "r", "long": "regex", "type": "bool",
        "desc": "interpret the separator as a regular expression"
      }
    ]
  },
  {
    "name": "nl",
    "desc": "Write each FILE to standard output, with line numbers added.",
    "input": "multi",
    "flags": [
      {
        "name": "BodyNumbering", "short": "b", "long": "body-numbering", "type": "a,t,n",
        "desc": "use STYLE for numbering body lines\na      number all lines\nt      number only nonempty lines\nn      number no lines"
      },
      {
        "name": "SectionDelimiter", "short": "d", "long": "section-delimiter", "type": "string",
        "desc": "use CC for separating logical pages"
      },
      {
        "name": "FooterNumbering", "short": "f", "long": "footer-numbering", "type": "a,t,n",
        "desc": "use STYLE for numbering footer lines\na      number all lines\nt      number only nonempty lines\nn      number no lines"
      },
      {
        "name": "HeadNumbering", "short": "h", "long": "head-numbering", "type": "a,t,n",
        "desc": "use STYLE for numbering header lines\na      number all lines\nt      number only nonempty lines\nn      number no lines"
      },
      {
        "name": "LineIncrement", "short": "i", "long": "line-increment", "type": "int",
        "desc": "line number increment at each line"
      },
      {
        "name": "JoinBlankLines", "short": "l", "long": "join-blank-lines", "type": "int",
        "desc": "group of NUMBER empty lines counted as one"
      },
      {
        "name": "NumberFormat", "short": "n", "long": "number-format", "type": "ln,rn,rz",
        "desc": "insert line numbers according to FORMAT\nln     left justified, no leading zeros\nrn     right justified, no leading zeros\nrz     right justified, leading zeros"
      },
      {
        "name": "NoRenumber", "short": "p", "long": "no-renumber", "type": "bool",
        "desc": "do not reset line numbers at logical pagesdo not reset line numbers at logical pages"
      },
      {
        "name": "NumberSeparator", "short": "s", "long": "number-separator", "type": "string",
        "desc": "add STRING after (possible) line number"
      },
      {
        "name": "StartingLineNumber", "short": "v", "long": "starting-line-number", "type": "int",
        "desc": "first line number on each logical page"
      },
      {
        "name": "NumberWidth", "short": "w", "long": "number-width", "type": "int",
        "desc": "use NUMBER columns for line numbers"
      }
    ]
  },
  {
    "name": "od",
    "desc": "Write an unambiguous representation, octal bytes by default, of FILE to standard output. With more than one FILE argument, concatenate them in the listed order to form the input.\n\nIf first and second call formats both apply, the second format is assumed if the last operand begins with + or (if there are 2 operands) a digit. An OFFSET operand means -j OFFSET. LABEL is the pseudo-address at first byte printed, incremented when dump is progressing. For OFFSET and LABEL, a 0x or 0X prefix indicates hexadecimal; suffixes may be . for octal and b for multiply by 512.",
    "input": "multi",
    "flags": [
      {
        "name": "AddressRadix", "short": "A", "long": "address-radix", "type": "d,o,x,n",
        "desc": "output format for file offsets. RADIX is one of [doxn], for Decimal, Octal, Hex or None"
      },
      {
        "name": "SkipBytes", "short": "j", "long": "skip-bytes", "type": "int",
        "desc": "skip BYTES input bytes first"
      },
      {
        "name": "ReadBytes", "short": "N", "long": "read-bytes", "type": "int",
        "desc": "limit dump to BYTES input bytes"
      },
      {
        "name": "Strings", "short": "S", "long": "strings", "type": "int",
        "desc": "output strings of at least BYTES graphic chars. 3 is implied when BYTES is not specified"
      },
      {
        "name": "Format", "short": "t", "long": "format", "type": "not-implemented",
        "desc": "select output format or formats"
      },
      {
        "name": "OutputDuplicates", "short": "v", "long": "output-duplicates", "type": "bool",
        "desc": "do not use * to mark line suppression"
      },
      {
        "name": "Width", "short": "W", "long": "width", "type": "int",
        "desc": "output BYTES bytes per output line. 32 is implied when BYTES is not specified"
      },
      {
        "name": "Traditional", "short": "", "long": "traditional", "type": "bool",
        "desc": "accept arguments in third form above"
      }
    ]
  },
  {
    "name": "base64",
    "desc": "Base64 encode or decode FILE, or standard input, to standard output.",
    "input": "one",
    "flags": [
      {
        "name": "Decode", "short": "d", "long": "decode", "type": "bool",
        "desc": "decode data"
      },
      {
        "name": "IgnoreGarbage", "short": "i", "long": "ignore-garbage", "type": "bool",
        "desc": "when decoding, ignore non-alphabet characters"
      },
      {
        "name": "Wrap", "short": "w", "long": "wrap", "type": "int",
        "desc": "wrap encoded lines after COLS character (default 76). Use 0 to disable line wrapping"
      }
    ]
  },
  {
    "name": "fmt",
    "desc": "Reformat each paragraph in the FILE(s), writing to standard output.",
    "input": "multi",
    "flags": [
      {
        "name": "CrownMargin", "short": "c", "long": "crown-margin", "type": "bool",
        "desc": "preserve indentation of first two lines"
      },
      {
        "name": "Prefix", "short": "p", "long": "prefix", "type": "string",
        "desc": "reformat only lines beginning with STRING, reattaching the prefix to reformatted lines"
      },
      {
        "name": "SplitOnly", "short": "s", "long": "split-only", "type": "bool",
        "desc": "split long lines, but do not refill"
      },
      {
        "name": "TaggedParagraph", "short": "t", "long": "tagged-paragraph", "type": "bool",
        "desc": "indentation of first line different from second"
      },
      {
        "name": "UniformSpacing", "short": "u", "long": "uniform-spacing", "type": "bool",
        "desc": "one space between words, two after sentences"
      },
      {
        "name": "Width", "short": "w", "long": "width", "type": "int",
        "desc": "maximum line width (default of 75 columns)"
      },
      {
        "name": "Goal", "short": "g", "long": "goal", "type": "int",
        "desc": "goal width (default of 93% of width)"
      }
    ]
  },
  {
    "name": "fold",
    "desc": "Wrap input lines in each FILE (standard input by default), writing to standard output.",
    "input": "multi",
    "flags": [
      {
        "name": "Bytes", "short": "b", "long": "bytes", "type": "int",
        "desc": "count bytes rather than columns"
      },
      {
        "name": "Spaces", "short": "s", "long": "spaces", "type": "bool",
        "desc": "break at spaces"
      },
      {
        "name": "Width", "short": "w", "long": "width", "type": "int",
        "desc": "use WIDTH columns instead of 80"
      }
    ]
  },
  {
    "name": "head",
    "desc": "Print the first 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name.",
    "input": "one",
    "flags": [
      {
        "name": "Lines", "short": "n", "long": "lines", "type": "int",
        "desc": "print the first K lines instead of the first 10; with the leading \"-\", print all but the last K lines of each file"
      },
      {
        "name": "Bytes", "short": "c", "long": "bytes", "type": "int",
        "desc": "print the first K bytes of each file; with the leading \"-\", print all but the last K bytes of each file"
      }
    ]
  },
  {
    "name": "tail",
    "desc": "Print the last 10 lines of each FILE to standard output. With more than one FILE, precede each with a header giving the file name.",
    "input": "one",
    "flags": [
      {
        "name": "Lines", "short": "n", "long": "lines", "type": "int",
        "desc": "output the last K lines, instead of the last 10; or use -n +K to output lines starting with the Kth"
      },
      {
        "name": "Bytes", "short": "c", "long": "bytes", "type": "int",
        "desc": "output the last K bytes; alternatively, use -c +K to output bytes starting with the Kth of each file"
      }
    ]
  },
  {
    "name": "sort",
    "desc": "Write sorted concatenation of all FILE(s) to standard output.",
    "input": "multi",
    "flags": [
      {
        "name": "DictionaryOrder", "short": "d", "long": "dictionary-order", "type": "bool",
        "desc": "consider only blanks and alphanumeric characters"
      },
      {
        "name": "NumericSort", "short": "n", "long": "numeric-sort", "type": "bool",
        "desc": "compare according to string numerical value"
      },
      {
        "name": "GeneralNumericSort", "short": "g", "long": "general-numeric-sort", "type": "bool",
        "desc": "compare according to general numerical value"
      },
      {
        "name": "HumanNumericSort", "short": "h", "long": "human-numeric-sort", "type": "bool",
        "desc": "compare human readable numbers (e.g., 2K 1G)"
      },
      {
        "name": "MonthSort", "short": "M", "long": "month-sort", "type": "bool",
        "desc": "compare (unknown) < \"JAN\" < ... < \"DEC\""
      },
      {
        "name": "VersionSort", "short": "V", "long": "version-sort", "type": "bool",
        "desc": "natural sort of (version) numbers within text"
      },

      {
        "name": "RandomSort", "short": "R", "long": "random-sort", "type": "bool",
        "desc": "sort by random hash of keys"
      },
      {
        "name": "Reverse", "short": "r", "long": "reverse", "type": "bool",
        "desc": "reverse the result of comparisons"
      },
      {
        "name": "IgnoreLeadingBlanks", "short": "b", "long": "ignore-leading-blanks", "type": "bool",
        "desc": "ignore leading blanks"
      },
      {
        "name": "IgnoreCase", "short": "f", "long": "ignore-case", "type": "bool",
        "desc": "fold lower case to upper case characters"
      },
      {
        "name": "IgnoreNonprinting", "short": "i", "long": "ignore-nonprinting", "type": "bool",
        "desc": "consider only printable characters"
      },
      {
        "name": "Check", "short": "c", "long": "check", "type": "bool",
        "desc": "check for sorted input; do not sort"
      },
      {
        "name": "CheckSilent", "short": "C", "long": "check=silent", "type": "bool",
        "desc": "like -c, but do not report first bad line"
      },
      {
        "name": "Debug", "short": "debug", "long": "debug", "type": "bool",
        "desc": "annotate the part of the line used to sort, and warn about questionable usage to stderr"
      },
      {
        "name": "Merge", "short": "m", "long": "merge", "type": "bool",
        "desc": "merge already sorted files; do not sort"
      },
      {
        "name": "Stable", "short": "s", "long": "stable", "type": "bool",
        "desc": "stabilize sort by disabling last-resort comparison"
      },
      {
        "name": "Unique", "short": "u", "long": "unique", "type": "bool",
        "desc": "with -c, check for strict ordering; without -c, output only the first of an equal run"
      },
      {
        "name": "ZeroTerminated", "short": "z", "long": "zero-terminated", "type": "bool",
        "desc": "end lines with 0 byte, not newline"
      },
      {
        "name": "FieldSeparator", "short": "t", "long": "field-separator", "type": "string",
        "desc": "use SEP instead of non-blank to blank transition"
      },
      {
        "name": "Key", "short": "k", "long": "key", "type": "int",
        "desc": "sort via a key; KEYDEF gives location and type"
      }
    ]
  },
  {
    "name": "shuf",
    "input": "one",
    "desc": "Write a random permutation of the input lines to standard output.",
    "flags": [
      {
        "name": "InputRange", "short": "i", "long": "input-range", "type": "string",
        "desc": "LO-HI\ntreat each number LO through HI as an input line"
      },
      {
        "name": "HeadCount", "short": "n", "long": "head-count", "type": "int",
        "desc": "output at most COUNT lines"
      },
      {
        "name": "ZeroTerminated", "short": "z", "long": "zero-terminated", "type": "bool",
        "desc": "end lines with 0 byte, not newline"
      }
    ]
  },
  {
    "name": "uniq",
    "desc": "Filter adjacent matching lines from INPUT (or standard input), writing to OUTPUT (or standard output).\nWith no options, matching lines are merged to the first occurrence.",
    "input": "one",
    "flags": [
      {
        "name": "SkipFields", "short": "f", "long": "skip-fields", "type": "int",
        "desc": "avoid comparing the first N fields"
      },
      {
        "name": "SkipChars", "short": "s", "long": "skip-chars", "type": "int",
        "desc": "avoid comparing the first N characters"
      },
      {
        "name": "CheckChars", "short": "w", "long": "check-chars", "type": "int",
        "desc": "compare no more than N characters in lines"
      },
      {
        "name": "Count", "short": "c", "long": "count", "type": "bool",
        "desc": "prefix lines by the number of occurrences"
      },
      {
        "name": "Repeated", "short": "d", "long": "repeated", "type": "bool",
        "desc": "only print duplicate lines"
      },
      {
        "name": "IgnoreCase", "short": "i", "long": "ignore-case", "type": "bool",
        "desc": "ignore differences in case when comparing"
      },
      {
        "name": "Unique", "short": "u", "long": "unique", "type": "bool",
        "desc": "only print unique lines"
      },
      {
        "name": "ZeroTerminated", "short": "z", "long": "zero-terminated", "type": "bool",
        "desc": "end lines with 0 byte, not newline"
      },
      {
        "name": "AllRepeated", "short": "D", "long": "all-repeated", "type": "none,prepend,separate",
        "desc": "print all duplicate lines delimit-method={none(default),prepend,separate} Delimiting is done with blank lines"
      }
    ]
  },
  {
    "name": "comm",
    "desc": "Compare sorted files FILE1 and FILE2 line by line.\nWith no options, produce three-column output. Column one contains lines unique to FILE1, column two contains lines unique to FILE2, and column three contains lines common to both files.",
    "input": "two",
    "flags": [
      {
        "name": "Column1", "short": "1", "long": "", "type": "bool",
        "desc": "suppress column 1 (lines unique to FILE1)"
      },
      {
        "name": "Column2", "short": "2", "long": "", "type": "bool",
        "desc": "suppress column 2 (lines unique to FILE2)"
      },
      {
        "name": "Column3", "short": "3", "long": "", "type": "bool",
        "desc": "suppress column 3 (lines that appear in both files)"
      },
      {
        "name": "OutputDelimiter", "short": "", "long": "output-delimiter", "type": "string",
        "desc": "separate columns with STR"
      },
      {
        "name": "CheckOrder", "short": "", "long": "check-order", "type": "bool",
        "desc": "check that the input is correctly sorted, even if all input lines are pairable"
      },
      {
        "name": "NocheckOrder", "short": "", "long": "nocheck-order", "type": "bool",
        "desc": "do not check that the input is correctly sorted"
      }
    ]
  },
  {
    "name": "cut",
    "desc": "Print selected parts of lines from each FILE to standard output.",
    "input": "multi",
    "flags": [
      {
        "name": "Bytes", "short": "b", "long": "bytes", "type": "string",
        "desc": "select only these bytes"
      },
      {
        "name": "Characters", "short": "c", "long": "charcters", "type": "string",
        "desc": "select only these characters"
      },
      {
        "name": "Fields", "short": "f", "long": "fields", "type": "string",
        "desc": "select only these fields;  also print any line that contains no delimiter"
      },
      {
        "name": "Delimiter", "short": "d", "long": "delimiter", "type": "string",
        "desc": "use DELIM instead of TAB for field delimiter"
      },
      {
        "name": "OnlyDelimited", "short": "s", "long": "only-delimited", "type": "bool",
        "desc": "do not print lines not containing delimiters"
      },
      {
        "name": "OutputDelimiter", "short": "", "long": "output-delimiter", "type": "string",
        "desc": "use STRING as the output delimiter the default is to use the input delimiter"
      },
      {
        "name": "Complement", "short": "", "long": "complement", "type": "bool",
        "desc": "complement the set of selected bytes, characters or fields"
      }
    ]
  },
  {
    "name": "grep",
    "desc": "grep searches the named input FILEs (or standard input if no files are named, or if a single hyphen-minus (-) is given as file name) for lines containing a match to the given PATTERN. By default, grep prints the matching lines.\n\nIn addition, three variant programs egrep, fgrep and rgrep are available. egrep is the same as grep -E. fgrep is the same as grep -F. rgrep is the same as grep -r. Direct invocation as either egrep or fgrep is deprecated, but is provided to allow historical applications that rely on them to run unmodified.",
    "input": "multi",
    "flags": [
      {
        "name": "ExtendedRegexp", "short": "E", "long": "extended-regexp", "type": "bool",
        "desc": "Interpret PATTERN as an extended regular expression (ERE, see below). (-E is specified by POSIX.)"
      },
      {
        "name": "FixedStrings", "short": "F", "long": "fixed-strings", "type": "bool",
        "desc": "Interpret PATTERN as a list of fixed strings, separated by newlines, any of which is to be matched. (-F is specified by POSIX.)"
      },
      {
        "name": "BasicRegexp", "short": "G", "long": "basic-regexp", "type": "bool",
        "desc": "Interpret PATTERN as a basic regular expression (BRE, see below). This is the default."
      },
      {
        "name": "PerlRegexp", "short": "P", "long": "perl-regexp", "type": "bool",
        "desc": "Interpret PATTERN as a Perl regular expression (PCRE, see below). This is highly experimental and grep -P may warn of unimplemented features."
      },
      {
        "name": "Regexp", "short": "e", "long": "regexp", "type": "string",
        "desc": "Use PATTERN as the pattern. This can be used to specify multiple search patterns, or to protect a pattern beginning with a hyphen (-). (-e is specified by POSIX.)"
      },
      {
        "name": "IgnoreCase", "short": "i", "long": "ignore-case", "type": "bool",
        "desc": "Ignore case distinctions in both the PATTERN and the input files. (-i is specified by POSIX.)"
      },
      {
        "name": "InvertMatch", "short": "v", "long": "invert-match", "type": "bool",
        "desc": "Invert the sense of matching, to select non-matching lines. (-v is specified by POSIX.)"
      },
      {
        "name": "WordRegexp", "short": "w", "long": "word-regexp", "type": "bool",
        "desc": "Select only those lines containing matches that form whole words. The test is that the matching substring must either be at the beginning of the line, or preceded by a non-word constituent character. Similarly, it must be either at the end of the line or followed by a non-word constituent character. Word-constituent characters are letters, digits, and the underscore."
      },
      {
        "name": "LineRegexp", "short": "x", "long": "line-regexp", "type": "bool",
        "desc": "Select only those matches that exactly match the whole line. (-x is specified by POSIX.)"
      },
      {
        "name": "Count", "short": "c", "long": "count", "type": "bool",
        "desc": "Suppress normal output; instead print a count of matching lines for each input file. With the -v, --invert-match option (see below), count non-matching lines. (-c is specified by POSIX.)"
      },
      {
        "name": "FilesWithoutMatch", "short": "L", "long": "files-without-match", "type": "bool",
        "desc": "Suppress normal output; instead print the name of each input file from which no output would normally have been printed. The scanning will stop on the first match."
      },
      {
        "name": "FilesWithMatch", "short": "L", "long": "files-with-match", "type": "bool",
        "desc": "Suppress normal output; instead print the name of each input file from which output would normally have been printed. The scanning will stop on the first match. (-l is specified by POSIX.)"
      },
      {
        "name": "MaxCount", "short": "m", "long": "max-count", "type": "int",
        "desc": "Stop reading a file after NUM matching lines. If the input is standard input from a regular file, and NUM matching lines are output, grep ensures that the standard input is positioned to just after the last matching line before exiting, regardless of the presence of trailing context lines. This enables a calling process to resume a search. When grep stops after NUM matching lines, it outputs any trailing context lines. When the -c or --count option is also used, grep does not output a count greater than NUM. When the -v or --invert-match option is also used, grep stops after outputting NUM non-matching lines."
      },
      {
        "name": "OnlyMatching", "short": "o", "long": "only-matching", "type": "bool",
        "desc": "Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line."
      },
      {
        "name": "Quiet", "short": "q", "long": "quiet", "type": "bool",
        "desc": "Quiet; do not write anything to standard output. Exit immediately with zero status if any match is found, even if an error was detected. Also see the -s or --no-messages option. (-q is specified by POSIX.)"
      },
      {
        "name": "NoMessages", "short": "s", "long": "no-messages", "type": "bool",
        "desc": "Suppress error messages about nonexistent or unreadable files. Portability note: unlike GNU grep, 7th Edition Unix grep did not conform to POSIX, because it lacked -q and its -s option behaved like GNU grep's -q option. USG-style grep also lacked -q but its -s option behaved like GNU grep. Portable shell scripts should avoid both -q and -s and should redirect standard and error output to /dev/null instead. (-s is specified by POSIX.)"
      },
      {
        "name": "ByteOffset", "short": "b", "long": "byte-offset", "type": "bool",
        "desc": "Print the 0-based byte offset within the input file before each line of output. If -o (--only-matching) is specified, print the offset of the matching part itself."
      },
      {
        "name": "WithFilename", "short": "H", "long": "with-filename", "type": "bool",
        "desc": "Print the file name for each match. This is the default when there is more than one file to search."
      },
      {
        "name": "NoFilename", "short": "h", "long": "no-filename", "type": "bool",
        "desc": "Suppress the prefixing of file names on output. This is the default when there is only one file (or only standard input) to search."
      },
      {
        "name": "LineNumber", "short": "n", "long": "line-number", "type": "bool",
        "desc": "Prefix each line of output with the 1-based line number within its input file. (-n is specified by POSIX.)"
      },
      {
        "name": "InitialTab", "short": "T", "long": "initial-tab", "type": "bool",
        "desc": "Make sure that the first character of actual line content lies on a tab stop, so that the alignment of tabs looks normal. This is useful with options that prefix their output to the actual content: -H,-n, and -b. In order to improve the probability that lines from a single file will all start at the same column, this also causes the line number and byte offset (if present) to be printed in a minimum size field width."
      },
      {
        "name": "UnixByteOffsets", "short": "u", "long": "unix-byte-offsets", "type": "bool",
        "desc": "Report Unix-style byte offsets. This switch causes grep to report byte offsets as if the file were a Unix-style text file, i.e., with CR characters stripped off. This will produce results identical to running grep on a Unix machine. This option has no effect unless -b option is also used; it has no effect on platforms other than MS-DOS and MS-Windows."
      },
      {
        "name": "Null", "short": "Z", "long": "null", "type": "bool",
        "desc": "Output a zero byte (the ASCII NUL character) instead of the character that normally follows a file name. For example, grep -lZ outputs a zero byte after each file name instead of the usual newline. This option makes the output unambiguous, even in the presence of file names containing unusual characters like newlines. This option can be used with commands like find -print0, perl -0, sort -z, and xargs -0 to process arbitrary file names, even those that contain newline characters."
      },
      {
        "name": "AfterContext", "short": "A", "long": "after-context", "type": "int",
        "desc": "Print NUM lines of trailing context after matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given."
      },
      {
        "name": "BeforeContext", "short": "B", "long": "before-context", "type": "int",
        "desc": "Print NUM lines of leading context before matching lines. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given."
      },
      {
        "name": "Context", "short": "C", "long": "context", "type": "int",
        "desc": "Print NUM lines of output context. Places a line containing a group separator (--) between contiguous groups of matches. With the -o or --only-matching option, this has no effect and a warning is given."
      },
      {
        "name": "Text", "short": "a", "long": "text", "type": "bool",
        "desc": "Process a binary file as if it were text; this is equivalent to the --binary-files=text option."
      },
      {
        "name": "Recursive", "short": "r", "long": "recursive", "type": "bool",
        "desc": "Read all files under each directory, recursively, following symbolic links only if they are on the command line. This is equivalent to the -d recurse option."
      },
      {
        "name": "DereferenceRecursive", "short": "R", "long": "dereference-recursive", "type": "bool",
        "desc": "Read all files under each directory, recursively. Follow all symbolic links, unlike -r."
      },
      {
        "name": "Pattern", "short": "", "long": "", "type": "string",
        "desc": "pattern to search"
      }
    ]
  }
]
